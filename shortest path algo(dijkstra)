//dijkstra by pankaj
//x->(weight,y);
#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long LL;
typedef pair<int,int> ip;
vector<ip> g[100005];
LL weight[100005];
int n,m;


void dijkstra()
{
    priority_queue< ip ,vector<ip>,greater<ip> > qe;
    
    qe.push({0,1});
    while(!qe.empty())
    {
        ip a=qe.top();
        qe.pop();
        //cout<<a.second<<" "<<a.first<<endl;
        for(auto it:g[a.second])
        {
            if(weight[it.second]>weight[a.second]+it.first)
            {
                //cout<<"giri "<<it.first<<" "<<weight[it.second]<<endl;
                weight[it.second]=weight[a.second]+it.first;
                qe.push({weight[it.second],it.second});
            }
        }
        //cout<<endl<<endl;
    }
}
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t=1;
	//cin>>t;
	while(t--)
	{
	    cin>>n>>m;
	    for(int i=2;i<=n;i++)
	        weight[i]=ULLONG_MAX;
	    weight[1]=0;
	    for(int i=0;i<m;i++)
	    {
	        int a,b,wei;
	        cin>>a>>b>>wei;
	        g[a].push_back({wei,b});
	    }
	    dijkstra();
	    for(int i=2;i<=n;i++)
	        cout<<weight[i]<<" ";
	}
	return 0;
}
